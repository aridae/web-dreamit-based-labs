// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package notifyrepo

import (
	"github.com/aridae/web-dreamit-api-based-labs/internal/domain"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			CreateNotifyFunc: func(notify domain.PostNotify) (int64, error) {
// 				panic("mock out the CreateNotify method")
// 			},
// 			DeleteNotifyFunc: func(notifyId int64) error {
// 				panic("mock out the DeleteNotify method")
// 			},
// 			FilterNotifiesFunc: func(filter domain.OptionalNotifyFilter) ([]domain.Notify, error) {
// 				panic("mock out the FilterNotifies method")
// 			},
// 			GetEventNotifiesWithSubjectFunc: func(eventId int64, subject string) ([]domain.Notify, error) {
// 				panic("mock out the GetEventNotifiesWithSubject method")
// 			},
// 			GetEventNotifiesWithTagFunc: func(eventId int64, tag string) ([]domain.Notify, error) {
// 				panic("mock out the GetEventNotifiesWithTag method")
// 			},
// 			GetEventNotifiesWithTagSubjectFunc: func(eventId int64, subject string, tag string) ([]domain.Notify, error) {
// 				panic("mock out the GetEventNotifiesWithTagSubject method")
// 			},
// 			GetNotifiesByEventIdFunc: func(eventId int64) ([]domain.Notify, error) {
// 				panic("mock out the GetNotifiesByEventId method")
// 			},
// 			GetNotifyFunc: func(notifyId int64) (*domain.Notify, error) {
// 				panic("mock out the GetNotify method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// CreateNotifyFunc mocks the CreateNotify method.
	CreateNotifyFunc func(notify domain.PostNotify) (int64, error)

	// DeleteNotifyFunc mocks the DeleteNotify method.
	DeleteNotifyFunc func(notifyId int64) error

	// FilterNotifiesFunc mocks the FilterNotifies method.
	FilterNotifiesFunc func(filter domain.OptionalNotifyFilter) ([]domain.Notify, error)

	// GetEventNotifiesWithSubjectFunc mocks the GetEventNotifiesWithSubject method.
	GetEventNotifiesWithSubjectFunc func(eventId int64, subject string) ([]domain.Notify, error)

	// GetEventNotifiesWithTagFunc mocks the GetEventNotifiesWithTag method.
	GetEventNotifiesWithTagFunc func(eventId int64, tag string) ([]domain.Notify, error)

	// GetEventNotifiesWithTagSubjectFunc mocks the GetEventNotifiesWithTagSubject method.
	GetEventNotifiesWithTagSubjectFunc func(eventId int64, subject string, tag string) ([]domain.Notify, error)

	// GetNotifiesByEventIdFunc mocks the GetNotifiesByEventId method.
	GetNotifiesByEventIdFunc func(eventId int64) ([]domain.Notify, error)

	// GetNotifyFunc mocks the GetNotify method.
	GetNotifyFunc func(notifyId int64) (*domain.Notify, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateNotify holds details about calls to the CreateNotify method.
		CreateNotify []struct {
			// Notify is the notify argument value.
			Notify domain.PostNotify
		}
		// DeleteNotify holds details about calls to the DeleteNotify method.
		DeleteNotify []struct {
			// NotifyId is the notifyId argument value.
			NotifyId int64
		}
		// FilterNotifies holds details about calls to the FilterNotifies method.
		FilterNotifies []struct {
			// Filter is the filter argument value.
			Filter domain.OptionalNotifyFilter
		}
		// GetEventNotifiesWithSubject holds details about calls to the GetEventNotifiesWithSubject method.
		GetEventNotifiesWithSubject []struct {
			// EventId is the eventId argument value.
			EventId int64
			// Subject is the subject argument value.
			Subject string
		}
		// GetEventNotifiesWithTag holds details about calls to the GetEventNotifiesWithTag method.
		GetEventNotifiesWithTag []struct {
			// EventId is the eventId argument value.
			EventId int64
			// Tag is the tag argument value.
			Tag string
		}
		// GetEventNotifiesWithTagSubject holds details about calls to the GetEventNotifiesWithTagSubject method.
		GetEventNotifiesWithTagSubject []struct {
			// EventId is the eventId argument value.
			EventId int64
			// Subject is the subject argument value.
			Subject string
			// Tag is the tag argument value.
			Tag string
		}
		// GetNotifiesByEventId holds details about calls to the GetNotifiesByEventId method.
		GetNotifiesByEventId []struct {
			// EventId is the eventId argument value.
			EventId int64
		}
		// GetNotify holds details about calls to the GetNotify method.
		GetNotify []struct {
			// NotifyId is the notifyId argument value.
			NotifyId int64
		}
	}
	lockCreateNotify                   sync.RWMutex
	lockDeleteNotify                   sync.RWMutex
	lockFilterNotifies                 sync.RWMutex
	lockGetEventNotifiesWithSubject    sync.RWMutex
	lockGetEventNotifiesWithTag        sync.RWMutex
	lockGetEventNotifiesWithTagSubject sync.RWMutex
	lockGetNotifiesByEventId           sync.RWMutex
	lockGetNotify                      sync.RWMutex
}

// CreateNotify calls CreateNotifyFunc.
func (mock *RepositoryMock) CreateNotify(notify domain.PostNotify) (int64, error) {
	if mock.CreateNotifyFunc == nil {
		panic("RepositoryMock.CreateNotifyFunc: method is nil but Repository.CreateNotify was just called")
	}
	callInfo := struct {
		Notify domain.PostNotify
	}{
		Notify: notify,
	}
	mock.lockCreateNotify.Lock()
	mock.calls.CreateNotify = append(mock.calls.CreateNotify, callInfo)
	mock.lockCreateNotify.Unlock()
	return mock.CreateNotifyFunc(notify)
}

// CreateNotifyCalls gets all the calls that were made to CreateNotify.
// Check the length with:
//     len(mockedRepository.CreateNotifyCalls())
func (mock *RepositoryMock) CreateNotifyCalls() []struct {
	Notify domain.PostNotify
} {
	var calls []struct {
		Notify domain.PostNotify
	}
	mock.lockCreateNotify.RLock()
	calls = mock.calls.CreateNotify
	mock.lockCreateNotify.RUnlock()
	return calls
}

// DeleteNotify calls DeleteNotifyFunc.
func (mock *RepositoryMock) DeleteNotify(notifyId int64) error {
	if mock.DeleteNotifyFunc == nil {
		panic("RepositoryMock.DeleteNotifyFunc: method is nil but Repository.DeleteNotify was just called")
	}
	callInfo := struct {
		NotifyId int64
	}{
		NotifyId: notifyId,
	}
	mock.lockDeleteNotify.Lock()
	mock.calls.DeleteNotify = append(mock.calls.DeleteNotify, callInfo)
	mock.lockDeleteNotify.Unlock()
	return mock.DeleteNotifyFunc(notifyId)
}

// DeleteNotifyCalls gets all the calls that were made to DeleteNotify.
// Check the length with:
//     len(mockedRepository.DeleteNotifyCalls())
func (mock *RepositoryMock) DeleteNotifyCalls() []struct {
	NotifyId int64
} {
	var calls []struct {
		NotifyId int64
	}
	mock.lockDeleteNotify.RLock()
	calls = mock.calls.DeleteNotify
	mock.lockDeleteNotify.RUnlock()
	return calls
}

// FilterNotifies calls FilterNotifiesFunc.
func (mock *RepositoryMock) FilterNotifies(filter domain.OptionalNotifyFilter) ([]domain.Notify, error) {
	if mock.FilterNotifiesFunc == nil {
		panic("RepositoryMock.FilterNotifiesFunc: method is nil but Repository.FilterNotifies was just called")
	}
	callInfo := struct {
		Filter domain.OptionalNotifyFilter
	}{
		Filter: filter,
	}
	mock.lockFilterNotifies.Lock()
	mock.calls.FilterNotifies = append(mock.calls.FilterNotifies, callInfo)
	mock.lockFilterNotifies.Unlock()
	return mock.FilterNotifiesFunc(filter)
}

// FilterNotifiesCalls gets all the calls that were made to FilterNotifies.
// Check the length with:
//     len(mockedRepository.FilterNotifiesCalls())
func (mock *RepositoryMock) FilterNotifiesCalls() []struct {
	Filter domain.OptionalNotifyFilter
} {
	var calls []struct {
		Filter domain.OptionalNotifyFilter
	}
	mock.lockFilterNotifies.RLock()
	calls = mock.calls.FilterNotifies
	mock.lockFilterNotifies.RUnlock()
	return calls
}

// GetEventNotifiesWithSubject calls GetEventNotifiesWithSubjectFunc.
func (mock *RepositoryMock) GetEventNotifiesWithSubject(eventId int64, subject string) ([]domain.Notify, error) {
	if mock.GetEventNotifiesWithSubjectFunc == nil {
		panic("RepositoryMock.GetEventNotifiesWithSubjectFunc: method is nil but Repository.GetEventNotifiesWithSubject was just called")
	}
	callInfo := struct {
		EventId int64
		Subject string
	}{
		EventId: eventId,
		Subject: subject,
	}
	mock.lockGetEventNotifiesWithSubject.Lock()
	mock.calls.GetEventNotifiesWithSubject = append(mock.calls.GetEventNotifiesWithSubject, callInfo)
	mock.lockGetEventNotifiesWithSubject.Unlock()
	return mock.GetEventNotifiesWithSubjectFunc(eventId, subject)
}

// GetEventNotifiesWithSubjectCalls gets all the calls that were made to GetEventNotifiesWithSubject.
// Check the length with:
//     len(mockedRepository.GetEventNotifiesWithSubjectCalls())
func (mock *RepositoryMock) GetEventNotifiesWithSubjectCalls() []struct {
	EventId int64
	Subject string
} {
	var calls []struct {
		EventId int64
		Subject string
	}
	mock.lockGetEventNotifiesWithSubject.RLock()
	calls = mock.calls.GetEventNotifiesWithSubject
	mock.lockGetEventNotifiesWithSubject.RUnlock()
	return calls
}

// GetEventNotifiesWithTag calls GetEventNotifiesWithTagFunc.
func (mock *RepositoryMock) GetEventNotifiesWithTag(eventId int64, tag string) ([]domain.Notify, error) {
	if mock.GetEventNotifiesWithTagFunc == nil {
		panic("RepositoryMock.GetEventNotifiesWithTagFunc: method is nil but Repository.GetEventNotifiesWithTag was just called")
	}
	callInfo := struct {
		EventId int64
		Tag     string
	}{
		EventId: eventId,
		Tag:     tag,
	}
	mock.lockGetEventNotifiesWithTag.Lock()
	mock.calls.GetEventNotifiesWithTag = append(mock.calls.GetEventNotifiesWithTag, callInfo)
	mock.lockGetEventNotifiesWithTag.Unlock()
	return mock.GetEventNotifiesWithTagFunc(eventId, tag)
}

// GetEventNotifiesWithTagCalls gets all the calls that were made to GetEventNotifiesWithTag.
// Check the length with:
//     len(mockedRepository.GetEventNotifiesWithTagCalls())
func (mock *RepositoryMock) GetEventNotifiesWithTagCalls() []struct {
	EventId int64
	Tag     string
} {
	var calls []struct {
		EventId int64
		Tag     string
	}
	mock.lockGetEventNotifiesWithTag.RLock()
	calls = mock.calls.GetEventNotifiesWithTag
	mock.lockGetEventNotifiesWithTag.RUnlock()
	return calls
}

// GetEventNotifiesWithTagSubject calls GetEventNotifiesWithTagSubjectFunc.
func (mock *RepositoryMock) GetEventNotifiesWithTagSubject(eventId int64, subject string, tag string) ([]domain.Notify, error) {
	if mock.GetEventNotifiesWithTagSubjectFunc == nil {
		panic("RepositoryMock.GetEventNotifiesWithTagSubjectFunc: method is nil but Repository.GetEventNotifiesWithTagSubject was just called")
	}
	callInfo := struct {
		EventId int64
		Subject string
		Tag     string
	}{
		EventId: eventId,
		Subject: subject,
		Tag:     tag,
	}
	mock.lockGetEventNotifiesWithTagSubject.Lock()
	mock.calls.GetEventNotifiesWithTagSubject = append(mock.calls.GetEventNotifiesWithTagSubject, callInfo)
	mock.lockGetEventNotifiesWithTagSubject.Unlock()
	return mock.GetEventNotifiesWithTagSubjectFunc(eventId, subject, tag)
}

// GetEventNotifiesWithTagSubjectCalls gets all the calls that were made to GetEventNotifiesWithTagSubject.
// Check the length with:
//     len(mockedRepository.GetEventNotifiesWithTagSubjectCalls())
func (mock *RepositoryMock) GetEventNotifiesWithTagSubjectCalls() []struct {
	EventId int64
	Subject string
	Tag     string
} {
	var calls []struct {
		EventId int64
		Subject string
		Tag     string
	}
	mock.lockGetEventNotifiesWithTagSubject.RLock()
	calls = mock.calls.GetEventNotifiesWithTagSubject
	mock.lockGetEventNotifiesWithTagSubject.RUnlock()
	return calls
}

// GetNotifiesByEventId calls GetNotifiesByEventIdFunc.
func (mock *RepositoryMock) GetNotifiesByEventId(eventId int64) ([]domain.Notify, error) {
	if mock.GetNotifiesByEventIdFunc == nil {
		panic("RepositoryMock.GetNotifiesByEventIdFunc: method is nil but Repository.GetNotifiesByEventId was just called")
	}
	callInfo := struct {
		EventId int64
	}{
		EventId: eventId,
	}
	mock.lockGetNotifiesByEventId.Lock()
	mock.calls.GetNotifiesByEventId = append(mock.calls.GetNotifiesByEventId, callInfo)
	mock.lockGetNotifiesByEventId.Unlock()
	return mock.GetNotifiesByEventIdFunc(eventId)
}

// GetNotifiesByEventIdCalls gets all the calls that were made to GetNotifiesByEventId.
// Check the length with:
//     len(mockedRepository.GetNotifiesByEventIdCalls())
func (mock *RepositoryMock) GetNotifiesByEventIdCalls() []struct {
	EventId int64
} {
	var calls []struct {
		EventId int64
	}
	mock.lockGetNotifiesByEventId.RLock()
	calls = mock.calls.GetNotifiesByEventId
	mock.lockGetNotifiesByEventId.RUnlock()
	return calls
}

// GetNotify calls GetNotifyFunc.
func (mock *RepositoryMock) GetNotify(notifyId int64) (*domain.Notify, error) {
	if mock.GetNotifyFunc == nil {
		panic("RepositoryMock.GetNotifyFunc: method is nil but Repository.GetNotify was just called")
	}
	callInfo := struct {
		NotifyId int64
	}{
		NotifyId: notifyId,
	}
	mock.lockGetNotify.Lock()
	mock.calls.GetNotify = append(mock.calls.GetNotify, callInfo)
	mock.lockGetNotify.Unlock()
	return mock.GetNotifyFunc(notifyId)
}

// GetNotifyCalls gets all the calls that were made to GetNotify.
// Check the length with:
//     len(mockedRepository.GetNotifyCalls())
func (mock *RepositoryMock) GetNotifyCalls() []struct {
	NotifyId int64
} {
	var calls []struct {
		NotifyId int64
	}
	mock.lockGetNotify.RLock()
	calls = mock.calls.GetNotify
	mock.lockGetNotify.RUnlock()
	return calls
}
