// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package inviterepo

import (
	"github.com/aridae/web-dreamit-api-based-labs/internal/domain"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

type RepositoryMock struct {
	// CreateInviteFunc mocks the CreateInvite method.
	CreateInviteFunc func(invite domain.PostInvite) (int64, error)

	// DeleteInviteByIdFunc mocks the DeleteInviteById method.
	DeleteInviteByIdFunc func(inviteId int64) error

	// DeleteInvitesByEventIdFunc mocks the DeleteInvitesByEventId method.
	DeleteInvitesByEventIdFunc func(eventId int64) error

	// GetInviteByIdFunc mocks the GetInviteById method.
	GetInviteByIdFunc func(inviteId int64) (*domain.Invite, error)

	// GetInvitesByEventIdFunc mocks the GetInvitesByEventId method.
	GetInvitesByEventIdFunc func(eventId int64) ([]domain.Invite, error)

	// GetInvitesByReceiverIdFunc mocks the GetInvitesByReceiverId method.
	GetInvitesByReceiverIdFunc func(recId uint64) ([]domain.Invite, error)

	// GetStatusInvitesByEventIdFunc mocks the GetStatusInvitesByEventId method.
	GetStatusInvitesByEventIdFunc func(eventId int64, statusId int64) ([]domain.Invite, error)

	// UpdateInviteStatusByIdFunc mocks the UpdateInviteStatusById method.
	UpdateInviteStatusByIdFunc func(inviteId int64, status int64) error

	// UpdateInvitesStatusByEventIdFunc mocks the UpdateInvitesStatusByEventId method.
	UpdateInvitesStatusByEventIdFunc func(eventId int64, status int64) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateInvite holds details about calls to the CreateInvite method.
		CreateInvite []struct {
			// Invite is the invite argument value.
			Invite domain.PostInvite
		}
		// DeleteInviteById holds details about calls to the DeleteInviteById method.
		DeleteInviteById []struct {
			// InviteId is the inviteId argument value.
			InviteId int64
		}
		// DeleteInvitesByEventId holds details about calls to the DeleteInvitesByEventId method.
		DeleteInvitesByEventId []struct {
			// EventId is the eventId argument value.
			EventId int64
		}
		// GetInviteById holds details about calls to the GetInviteById method.
		GetInviteById []struct {
			// InviteId is the inviteId argument value.
			InviteId int64
		}
		// GetInvitesByEventId holds details about calls to the GetInvitesByEventId method.
		GetInvitesByEventId []struct {
			// EventId is the eventId argument value.
			EventId int64
		}
		// GetInvitesByReceiverId holds details about calls to the GetInvitesByReceiverId method.
		GetInvitesByReceiverId []struct {
			// RecId is the recId argument value.
			RecId uint64
		}
		// GetStatusInvitesByEventId holds details about calls to the GetStatusInvitesByEventId method.
		GetStatusInvitesByEventId []struct {
			// EventId is the eventId argument value.
			EventId int64
			// StatusId is the statusId argument value.
			StatusId int64
		}
		// UpdateInviteStatusById holds details about calls to the UpdateInviteStatusById method.
		UpdateInviteStatusById []struct {
			// InviteId is the inviteId argument value.
			InviteId int64
			// Status is the status argument value.
			Status int64
		}
		// UpdateInvitesStatusByEventId holds details about calls to the UpdateInvitesStatusByEventId method.
		UpdateInvitesStatusByEventId []struct {
			// EventId is the eventId argument value.
			EventId int64
			// Status is the status argument value.
			Status int64
		}
	}
	lockCreateInvite                 sync.RWMutex
	lockDeleteInviteById             sync.RWMutex
	lockDeleteInvitesByEventId       sync.RWMutex
	lockGetInviteById                sync.RWMutex
	lockGetInvitesByEventId          sync.RWMutex
	lockGetInvitesByReceiverId       sync.RWMutex
	lockGetStatusInvitesByEventId    sync.RWMutex
	lockUpdateInviteStatusById       sync.RWMutex
	lockUpdateInvitesStatusByEventId sync.RWMutex
}

// CreateInvite calls CreateInviteFunc.
func (mock *RepositoryMock) CreateInvite(invite domain.PostInvite) (int64, error) {
	if mock.CreateInviteFunc == nil {
		panic("RepositoryMock.CreateInviteFunc: method is nil but Repository.CreateInvite was just called")
	}
	callInfo := struct {
		Invite domain.PostInvite
	}{
		Invite: invite,
	}
	mock.lockCreateInvite.Lock()
	mock.calls.CreateInvite = append(mock.calls.CreateInvite, callInfo)
	mock.lockCreateInvite.Unlock()
	return mock.CreateInviteFunc(invite)
}

// CreateInviteCalls gets all the calls that were made to CreateInvite.
// Check the length with:
//     len(mockedRepository.CreateInviteCalls())
func (mock *RepositoryMock) CreateInviteCalls() []struct {
	Invite domain.PostInvite
} {
	var calls []struct {
		Invite domain.PostInvite
	}
	mock.lockCreateInvite.RLock()
	calls = mock.calls.CreateInvite
	mock.lockCreateInvite.RUnlock()
	return calls
}

// DeleteInviteById calls DeleteInviteByIdFunc.
func (mock *RepositoryMock) DeleteInviteById(inviteId int64) error {
	if mock.DeleteInviteByIdFunc == nil {
		panic("RepositoryMock.DeleteInviteByIdFunc: method is nil but Repository.DeleteInviteById was just called")
	}
	callInfo := struct {
		InviteId int64
	}{
		InviteId: inviteId,
	}
	mock.lockDeleteInviteById.Lock()
	mock.calls.DeleteInviteById = append(mock.calls.DeleteInviteById, callInfo)
	mock.lockDeleteInviteById.Unlock()
	return mock.DeleteInviteByIdFunc(inviteId)
}

// DeleteInviteByIdCalls gets all the calls that were made to DeleteInviteById.
// Check the length with:
//     len(mockedRepository.DeleteInviteByIdCalls())
func (mock *RepositoryMock) DeleteInviteByIdCalls() []struct {
	InviteId int64
} {
	var calls []struct {
		InviteId int64
	}
	mock.lockDeleteInviteById.RLock()
	calls = mock.calls.DeleteInviteById
	mock.lockDeleteInviteById.RUnlock()
	return calls
}

// DeleteInvitesByEventId calls DeleteInvitesByEventIdFunc.
func (mock *RepositoryMock) DeleteInvitesByEventId(eventId int64) error {
	if mock.DeleteInvitesByEventIdFunc == nil {
		panic("RepositoryMock.DeleteInvitesByEventIdFunc: method is nil but Repository.DeleteInvitesByEventId was just called")
	}
	callInfo := struct {
		EventId int64
	}{
		EventId: eventId,
	}
	mock.lockDeleteInvitesByEventId.Lock()
	mock.calls.DeleteInvitesByEventId = append(mock.calls.DeleteInvitesByEventId, callInfo)
	mock.lockDeleteInvitesByEventId.Unlock()
	return mock.DeleteInvitesByEventIdFunc(eventId)
}

// DeleteInvitesByEventIdCalls gets all the calls that were made to DeleteInvitesByEventId.
// Check the length with:
//     len(mockedRepository.DeleteInvitesByEventIdCalls())
func (mock *RepositoryMock) DeleteInvitesByEventIdCalls() []struct {
	EventId int64
} {
	var calls []struct {
		EventId int64
	}
	mock.lockDeleteInvitesByEventId.RLock()
	calls = mock.calls.DeleteInvitesByEventId
	mock.lockDeleteInvitesByEventId.RUnlock()
	return calls
}

// GetInviteById calls GetInviteByIdFunc.
func (mock *RepositoryMock) GetInviteById(inviteId int64) (*domain.Invite, error) {
	if mock.GetInviteByIdFunc == nil {
		panic("RepositoryMock.GetInviteByIdFunc: method is nil but Repository.GetInviteById was just called")
	}
	callInfo := struct {
		InviteId int64
	}{
		InviteId: inviteId,
	}
	mock.lockGetInviteById.Lock()
	mock.calls.GetInviteById = append(mock.calls.GetInviteById, callInfo)
	mock.lockGetInviteById.Unlock()
	return mock.GetInviteByIdFunc(inviteId)
}

// GetInviteByIdCalls gets all the calls that were made to GetInviteById.
// Check the length with:
//     len(mockedRepository.GetInviteByIdCalls())
func (mock *RepositoryMock) GetInviteByIdCalls() []struct {
	InviteId int64
} {
	var calls []struct {
		InviteId int64
	}
	mock.lockGetInviteById.RLock()
	calls = mock.calls.GetInviteById
	mock.lockGetInviteById.RUnlock()
	return calls
}

// GetInvitesByEventId calls GetInvitesByEventIdFunc.
func (mock *RepositoryMock) GetInvitesByEventId(eventId int64) ([]domain.Invite, error) {
	if mock.GetInvitesByEventIdFunc == nil {
		panic("RepositoryMock.GetInvitesByEventIdFunc: method is nil but Repository.GetInvitesByEventId was just called")
	}
	callInfo := struct {
		EventId int64
	}{
		EventId: eventId,
	}
	mock.lockGetInvitesByEventId.Lock()
	mock.calls.GetInvitesByEventId = append(mock.calls.GetInvitesByEventId, callInfo)
	mock.lockGetInvitesByEventId.Unlock()
	return mock.GetInvitesByEventIdFunc(eventId)
}

// GetInvitesByEventIdCalls gets all the calls that were made to GetInvitesByEventId.
// Check the length with:
//     len(mockedRepository.GetInvitesByEventIdCalls())
func (mock *RepositoryMock) GetInvitesByEventIdCalls() []struct {
	EventId int64
} {
	var calls []struct {
		EventId int64
	}
	mock.lockGetInvitesByEventId.RLock()
	calls = mock.calls.GetInvitesByEventId
	mock.lockGetInvitesByEventId.RUnlock()
	return calls
}

// GetInvitesByReceiverId calls GetInvitesByReceiverIdFunc.
func (mock *RepositoryMock) GetInvitesByReceiverId(recId uint64) ([]domain.Invite, error) {
	if mock.GetInvitesByReceiverIdFunc == nil {
		panic("RepositoryMock.GetInvitesByReceiverIdFunc: method is nil but Repository.GetInvitesByReceiverId was just called")
	}
	callInfo := struct {
		RecId uint64
	}{
		RecId: recId,
	}
	mock.lockGetInvitesByReceiverId.Lock()
	mock.calls.GetInvitesByReceiverId = append(mock.calls.GetInvitesByReceiverId, callInfo)
	mock.lockGetInvitesByReceiverId.Unlock()
	return mock.GetInvitesByReceiverIdFunc(recId)
}

// GetInvitesByReceiverIdCalls gets all the calls that were made to GetInvitesByReceiverId.
// Check the length with:
//     len(mockedRepository.GetInvitesByReceiverIdCalls())
func (mock *RepositoryMock) GetInvitesByReceiverIdCalls() []struct {
	RecId uint64
} {
	var calls []struct {
		RecId uint64
	}
	mock.lockGetInvitesByReceiverId.RLock()
	calls = mock.calls.GetInvitesByReceiverId
	mock.lockGetInvitesByReceiverId.RUnlock()
	return calls
}

// GetStatusInvitesByEventId calls GetStatusInvitesByEventIdFunc.
func (mock *RepositoryMock) GetStatusInvitesByEventId(eventId int64, statusId int64) ([]domain.Invite, error) {
	if mock.GetStatusInvitesByEventIdFunc == nil {
		panic("RepositoryMock.GetStatusInvitesByEventIdFunc: method is nil but Repository.GetStatusInvitesByEventId was just called")
	}
	callInfo := struct {
		EventId  int64
		StatusId int64
	}{
		EventId:  eventId,
		StatusId: statusId,
	}
	mock.lockGetStatusInvitesByEventId.Lock()
	mock.calls.GetStatusInvitesByEventId = append(mock.calls.GetStatusInvitesByEventId, callInfo)
	mock.lockGetStatusInvitesByEventId.Unlock()
	return mock.GetStatusInvitesByEventIdFunc(eventId, statusId)
}

// GetStatusInvitesByEventIdCalls gets all the calls that were made to GetStatusInvitesByEventId.
// Check the length with:
//     len(mockedRepository.GetStatusInvitesByEventIdCalls())
func (mock *RepositoryMock) GetStatusInvitesByEventIdCalls() []struct {
	EventId  int64
	StatusId int64
} {
	var calls []struct {
		EventId  int64
		StatusId int64
	}
	mock.lockGetStatusInvitesByEventId.RLock()
	calls = mock.calls.GetStatusInvitesByEventId
	mock.lockGetStatusInvitesByEventId.RUnlock()
	return calls
}

// UpdateInviteStatusById calls UpdateInviteStatusByIdFunc.
func (mock *RepositoryMock) UpdateInviteStatusById(inviteId int64, status int64) error {
	if mock.UpdateInviteStatusByIdFunc == nil {
		panic("RepositoryMock.UpdateInviteStatusByIdFunc: method is nil but Repository.UpdateInviteStatusById was just called")
	}
	callInfo := struct {
		InviteId int64
		Status   int64
	}{
		InviteId: inviteId,
		Status:   status,
	}
	mock.lockUpdateInviteStatusById.Lock()
	mock.calls.UpdateInviteStatusById = append(mock.calls.UpdateInviteStatusById, callInfo)
	mock.lockUpdateInviteStatusById.Unlock()
	return mock.UpdateInviteStatusByIdFunc(inviteId, status)
}

// UpdateInviteStatusByIdCalls gets all the calls that were made to UpdateInviteStatusById.
// Check the length with:
//     len(mockedRepository.UpdateInviteStatusByIdCalls())
func (mock *RepositoryMock) UpdateInviteStatusByIdCalls() []struct {
	InviteId int64
	Status   int64
} {
	var calls []struct {
		InviteId int64
		Status   int64
	}
	mock.lockUpdateInviteStatusById.RLock()
	calls = mock.calls.UpdateInviteStatusById
	mock.lockUpdateInviteStatusById.RUnlock()
	return calls
}

// UpdateInvitesStatusByEventId calls UpdateInvitesStatusByEventIdFunc.
func (mock *RepositoryMock) UpdateInvitesStatusByEventId(eventId int64, status int64) error {
	if mock.UpdateInvitesStatusByEventIdFunc == nil {
		panic("RepositoryMock.UpdateInvitesStatusByEventIdFunc: method is nil but Repository.UpdateInvitesStatusByEventId was just called")
	}
	callInfo := struct {
		EventId int64
		Status  int64
	}{
		EventId: eventId,
		Status:  status,
	}
	mock.lockUpdateInvitesStatusByEventId.Lock()
	mock.calls.UpdateInvitesStatusByEventId = append(mock.calls.UpdateInvitesStatusByEventId, callInfo)
	mock.lockUpdateInvitesStatusByEventId.Unlock()
	return mock.UpdateInvitesStatusByEventIdFunc(eventId, status)
}

// UpdateInvitesStatusByEventIdCalls gets all the calls that were made to UpdateInvitesStatusByEventId.
// Check the length with:
//     len(mockedRepository.UpdateInvitesStatusByEventIdCalls())
func (mock *RepositoryMock) UpdateInvitesStatusByEventIdCalls() []struct {
	EventId int64
	Status  int64
} {
	var calls []struct {
		EventId int64
		Status  int64
	}
	mock.lockUpdateInvitesStatusByEventId.RLock()
	calls = mock.calls.UpdateInvitesStatusByEventId
	mock.lockUpdateInvitesStatusByEventId.RUnlock()
	return calls
}
